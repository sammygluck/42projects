PUSHSWAP

------------------------------------------------

Allowed actions:
1. Swapping top of stack
	a. swap a
	b. swap b
	c. swap a & b
2. Pushing from one to the other
	a. push a
	b. push b
3. Rotating (first becomes last)
	a. rotate a 
	b. rotate b
	c. rotate a & b
4. Reverse Rotate (last becomes first)
	a. reverse rotate a
	b. reverse rotate b
	c. reverse rotate a & b
-------------------------------------------------

In order to solve this, I would first like to research some of the sorting
algorithms around, even though this excercise is specifically about stack 
sorting algorithms. I will do this in another text file.

Another point worth mentioning is that there are really a few problems to solve:
1. How do I save the input stack so that I can use it best? Some options:
	a. linked list
	b. array
2. How do I use the allowed actions for sorting?
3. How can I maximize the efficiency of sorting using those actions?
4. How do I convert the allowed actions into code?

-------------------------------------------------

To me it seems kinda clear that not all actions are needed. (at least so I think)
For example, 1C, 3C & 4C might not be needed (again, it could depend on the implementation.)

-------------------------------------------------

As far as algorithms is concerned:
The simplest algorithm that will work but will be incorrect:
find the lowest number on stack A
get it to the top push to stack B
rinse & repeat until end of stack A
push everything back to stack A

The amounts of unnecessary ra actions make this very inefficient, but gives an idea
of how the stack can become sorted using the actions given.

--------------------------------------------------

From what I understood from others, is that I need to further research:
- Radix sorting algorithm
- Simplifying the stack (i.e 18, 7, 21 -> 2, 1, 3) 
if simplifying the stack would be necessary, the following things to watch out for:
	- How can I do it without losing the position of values.

--------------------------------------------------

I saw online someone who implemented the following:
- find the median
- anything above stays in stack, anything below goes in B
- find the median again
- continue with steps until stack A is down to 1-2 elements
- put stack A in order
- start pushing from B back to A whilst sorting
- this all by keeping track of the stack frames

---------------------------------------------------

Similarly another method, implemented something similar but instead of keeping on
cutting the stack in two, they did something else:
- if the stack is the size of 5 -> solve one way
- if the stack is the size of 100 -> solve another way (split the stack in two)
- if the stack is the size of 500 -> solve another way (split the stack in four)

---------------------------------------------------

What are my thoughts on all of this (i.e. the algorithm section):
- I definitely think that breaking the stack in multiple pieces is a great idea.
- I'm still uncertain what the best way of actually sorting is
- Another important point that became clear when watching someone's project on 
  YouTube:
	- I can do a million permutations behind the scenes, as long as the sequence
	  of the instructions is sound (ex.: I can quicksort to find the median)

---------------------------------------------------

Another few questions that need to be answered along the way:
- Which data structure to use for the stacks (arrays, linked lists)
	- I've seen the use of a doubly-circular linked list
	- As I've never used linked lists, it will need to be researched
- Before the actual sorting happens, what kind of initializing is necessary
	- pre-sorting to find median?
	- simplifying the stack
	- error checking; is the stack valid?
	- parsing the stack (seperating the values and atoi'ing the stack)
	- check if the stack is already sorted

---------------------------------------------------

Implementation of the allowed actions will also depend on the data structure chosen
for the stacks. Examples:

sa/sb:
Swapping an integer in an array is simple by using a temporary var,
however, how does this work in a linked list?

ra/rb/rra/rrb:
Adding to the beginning/end of linked lists might be doable, but how do you do that
in an array.

---------------------------------------------------

Also, another issue in arrays: since the amount of data coming in is dynamic, the
numbers coming into our stack needs to be counted before placing it in an array as
we can only allocate an array once we know the length of the data we're putting in it.

On the other hand, this isn't such an issue with linked lists.

---------------------------------------------------

Let's give a try to create a map of how this project should be built:

1. Input processing
	a. conversions
	b. simplifications
2. Initialize the stacks (i.e. create stacks and put info in them)
3. Stack actions
4. Algorithm
	a. if sorted
	b. find middle/quarter
	c. push in 'roughly right order' until reached middle
	d. find middle/quarter...
	e. push back with sorting
	f. keep track of stack frames
5. Check functions
	a. check if already sorted	

----------------------------------------------------

So we're a few weeks later and this is what I've got so far:
1. I've decided to use linked lists because:
	a. I've heard it's the better option for this project
	b. I would finally like to wrap my head around this topic
2. So, at this point, my program can take a string with numbers and output the numbers
as actual numbers which will be added one at a time to a new node on the linked list.
3. This is the way we initialize stack_a. Stack_b will be set to null.
4. Furthermore, I've got some basic actions for the two stacks, such as rotate,
reverse_rotate, swap & push. These are things we can further build on.
5. I've also created a Makefile (with the help of ChatGPT) which will save the
sourcefiles, object files and binary each in seperate files.
The seperation gives the project more organization and the creation of the Makefile
allows for me to easily integrate new files and functions in the project with easy 
testing. (There's also a header file).

What is there left to do?
1. The actual algorithm
2. Finetuning the action section
3. Function to check if the stack is already sorted.

--------------------------

Ok, so I'm finally at the stage where I can work on the algorithm.
There are two options ahead:
1. Use the break into pieces algorithm 
2. Use Radix

Either way, I would like to have a function that simplifies the stack.
How to go about it?
What does it mean?
1. it means: let's say 7,2, 4 will be replaced with 3,1,2
2. One implementation would be:
	a: count how many there are.
	b: check for the highest
	c: replace with number
	d: 