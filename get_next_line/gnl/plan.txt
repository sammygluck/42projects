Introduction:
This project is called get_next_line. 
We must create a function that:
a: reads a line from a file descriptor
b: allocates that line to piece of memory 
c: returns that piece of memory

Some challenges:
a: when to stop?
	- eof
	- \n
b: what is meant by buffer? does that affect when to stop?

Ok, some answers:
What is meant by buffer:
read() takes three arguments: 1.) fd ; 2.) buffer (which is a char *) 3.) sizeof buffer
We can define at compilation time a macro called BUFFER_SIZE, that can be used:
a.) when declaring the variable buffer: char buffer[BUFFER_SIZE]
b.) for the third argument in read

In order to define this macro at compilation time, we must add -D name=value

I will also provide here some sample code from chatGPT on how to use open(), read() and close().


#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 4

int main(void) {
    int fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        // handle error
    }
    char buffer[BUFFER_SIZE];
    int bytes_read = read(fd, buffer, BUFFER_SIZE);
    if (bytes_read == -1) {
        // handle error
    }
    if (close(fd) == -1) {
        // handle error
    }
    // use the data in buffer
    return 0;
}


---------------------------------------------

Ok, we're past the first building blocks of understanding how the read() function works.
Now, we need to be able to implement it in our function. Some of the things we need to keep in mind:
- Our goal is to return a line from our file. 
- The way we do that is by reading until we arrive to a newline.
	- I'm not sure if the checking for \n happens at read() level 
	- or in seperate string level
	- if it would happen on read() level, we would need to 
		- set buffersize to 1
		- use BUFFER_SIZE as the length of perhaps a while loop
	- if it would happen on string level, we would need to
		- make sure to allocate enough memory (buffer_size)
		- what would happen if \n is found after say 7 calls to read()?

- Another goal is to retain our status when the function returns, so that we can call get_next_line() over and over.
For read() that shouldn't be an issue, but for us, we'll probably need to use static functions/variables.


Let's speak it out:
We grab hold of our buffer in a seperate string. We check for newline. 
If found: great, we can print out the string. But no, not so fast, what happens to the parts after the newline. How can we retain accuracy with half strings.

So, the solution would be the following:
1. read buffer into new string (append mode)
2. check new string for \n
3. if found: 
	a: copy bytes into char *next_line
	b: do some cleanup (i.e. move pointer)
4. if not found:
	a: continue reading buffer and appending
5. this whole process should continue until:
	a: the file has reached its end

-----------------------------------------------

I've seemed to get a working version, but need to still refine and perfect.
The first thing I would like to write out is the hierarchy of functions:
1. main
2. get_next_line
3. malloc		checknewline		read		ft_strjoin		ft_strlen		ft_strcpy
4. 												malloc
												ft_strlen

The reason for this is in order to keep track of all the return values that need to be dealt with, especially in cases of error.

--------------------------------------------------

I'm getting constant errors because of free and I don't know what I'm doing wrong.
So frustrating!!
I'm therefore planning of rethinking the whole project and doing it again step by step.
Let's go:
---------------------------------------

1.We want to read a file line by line. 
2.We have a buffersize to read each time.
3.We need to return a newline each time the function is called.
4.If we read more than up until the newline, we must make sure to save up to the 
newline in the 'next_line' variable.
5.We then must store all the read bytes in a static variable.
6.We must also clean the static variable from the line up until now.
7.This continues up until we reach the end i.e. 0 read bytes or until an error is encountered.

------------------
An error could be:
a. an empty string passed to a function
b. malloc returned a NULL pointer
c. the fd is not correct 
	1. fd < 0
d. read returns -1

------------------
Some potential cleanup ways for the static variable:
a. Move the pointer up: len(next_line)/until newline is found/
b. Create a new string that copies only the bytes that don't include the newstring
	1. either by + len(new_string)
	2. or by using ft_substring that returns pointer location from found substring

------------------

Method for making sure that each read is going to concatenate to string:
a. strjoin
b. linked list?

------------------

Method for extracting next_line from static char var:
a. strcpy [copies all values from static to next_line and cleans static]
	1. copies up until including a newline
	2.

This will only be activated once we find a newline.
That means that every time buffer is copied in the static var, we must make checks:
- for newline

-----------------

When reading into buffer, we must make sure that buffer is empty. 
The reason being, if the read bytes is shorter than buffer, 
we will get old bytes in our static variable.
Ways of doing this:
a. bzero
b. creating a new buffer variable each time

-----------------

Every time we malloc we must make sure to free()
[unless it's the job of the main function to do so]

-----------------

Difference between first call of get_next_line & subsequent calls
1.
first: static char is empty
second: static char might have chars

------ 

Difference between middle calls of get_next_line & last call
1.
middle: read_chars > 0
last: read_chars = 0

------

Difference between first call to copy length of buffer in static char with future ones
1. 
first: static char is length of BUFFER_SIZE or smaller
subsequent: static char can be larger than BUFFER_SIZE

------

Things that always stay the same:
1. The BUFFER_SIZE to be read
2. 

Things that can vary:
1. length of static char
2. how many '\n' there are in a read buffer
3. if there is a '\n' in the static char
4. 
